package xyz.emirdev.emirenchants;

import net.kyori.adventure.text.logger.slf4j.ComponentLogger;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.stream.Collectors;

public class EnchantmentDatapack {
    public static void init(ComponentLogger logger) {
        Path datapackFolderPath = Path.of("world/datapacks");
        if (!Files.exists(datapackFolderPath)) {
            logger.info("World datapacks folder was not found. Enchantments will not be registered to the enchanting table.");
            return;
        }
        String main = "world/datapacks/emirenchants";
        try {
            File enchantmentsFolder = new File(main + "/data/minecraft/tags/enchantment");
            enchantmentsFolder.mkdirs();
            File enchantmentsFile = new File(main + "/data/minecraft/tags/enchantment/non_treasure.json");
            enchantmentsFile.createNewFile();
            FileWriter eWriter = new FileWriter(enchantmentsFile);
            eWriter.write(
                    String.format("""
                        {
                            "values": [
                                %s
                            ]
                        }
                        """,
                            EmirEnchants.getEnchantments().stream().map(key -> "\"" + key.key().key() + "\"").collect(Collectors.joining(",\n        "))
                    )
            );
            eWriter.close();

            File mcMetaFile = new File(main + "/pack.mcmeta");
            FileWriter mcMetaWriter = new FileWriter(mcMetaFile);
            mcMetaWriter.write("""
                        {
                            "pack": {
                                "pack_format": 48,
                                "description": "Datapack generated by EmirEnchants plugin."
                            }
                        }
                        """
            );
            mcMetaWriter.close();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
